#!/usr/bin/env python

from __future__ import print_function

import os
import sys
import time
import json
from pprint import pprint

import mesos
import mesos_pb2

TOTAL_TASKS = 5

TASK_CPUS = 1
TASK_MEM = 32

class HTTPProxyScheduler(mesos.Scheduler):
  def __init__(self, executor):
    self.executor = executor
    self.taskData = {}
    self.tasksLaunched = 0
    self.tasksFinished = 0
    self.messagesSent = 0
    self.messagesReceived = 0

  def registered(self, driver, frameworkId, masterInfo):
    """
      Invoked when the scheduler successfully registers with a Mesos master.
      It is called with the frameworkId, a unique ID generated by the
      master, and the masterInfo which is information about the master
      itself.
    """
    print "Registered with framework ID %s" % frameworkId.value

  def reregistered(self, driver, masterInfo):
    """
      Invoked when the scheduler re-registers with a newly elected Mesos
      master.  This is only called when the scheduler has previously been
      registered.  masterInfo contains information about the newly elected
      master.
    """
    print "Re-Registered with new master"

  def disconnected(self, driver):
    """
      Invoked when the scheduler becomes disconnected from the master, e.g.
      the master fails and another is taking over.
    """
    print "Disconnected from master"

  def resourceOffers(self, driver, offers):
    """
      Invoked when resources have been offered to this framework. A single
      offer will only contain resources from a single slave.  Resources
      associated with an offer will not be re-offered to _this_ framework
      until either (a) this framework has rejected those resources (see
      SchedulerDriver.launchTasks) or (b) those resources have been
      rescinded (see Scheduler.offerRescinded).  Note that resources may be
      concurrently offered to more than one framework at a time (depending
      on the allocator being used).  In that case, the first framework to
      launch tasks using those resources will be able to use them while the
      other frameworks will have those resources rescinded (or if a
      framework has already launched tasks with those resources then those
      tasks will fail with a TASK_LOST status and a message saying as much).
    """
    print "Got %d resource offers" % len(offers)

    for offer in offers:
      info = {
        "attributes": [a for a in offer.attributes],
        "executor_ids": [ei.value for ei in offer.executor_ids],
        "framework_id": offer.framework_id.value,
        "hostname": offer.hostname,
        "id": offer.id.value,
        "resources": [
          {
            "name": r.name,
            "ranges": [{"begin": ra.begin, "end": ra.end} for ra in r.ranges.range],
            "role": r.role,
            "scalar": r.scalar.value,
            "set": [s for s in r.set.item],
            "type": r.type
          } for r in offer.resources],
        "slave_id": offer.slave_id.value
      }

      # print(json.dumps(info, sort_keys=True, indent=2, separators=(',', ': ')))

      tasks = []
      print "Got resource offer %s" % offer.id.value
      if self.tasksLaunched < TOTAL_TASKS:
        tid = self.tasksLaunched
        self.tasksLaunched += 1

        print "Accepting offer on %s to start task %d" \
            % (offer.hostname, tid)

        task = mesos_pb2.TaskInfo()
        task.task_id.value = str(tid)
        task.slave_id.value = offer.slave_id.value
        task.name = "task %d" % tid
        task.executor.MergeFrom(self.executor)

        cpus = task.resources.add()
        cpus.name = "cpus"
        cpus.type = mesos_pb2.Value.SCALAR
        cpus.scalar.value = TASK_CPUS

        mem = task.resources.add()
        mem.name = "mem"
        mem.type = mesos_pb2.Value.SCALAR
        mem.scalar.value = TASK_MEM

        tasks.append(task)
        self.taskData[task.task_id.value] = (
          offer.slave_id, task.executor.executor_id)
      driver.launchTasks(offer.id, tasks)

  def offerRescinded(self, driver, offerId):
    """
      Invoked when an offer is no longer valid (e.g., the slave was lost or
      another framework used resources in the offer.) If for whatever reason
      an offer is never rescinded (e.g., dropped message, failing over
      framework, etc.), a framwork that attempts to launch tasks using an
      invalid offer will receive TASK_LOST status updats for those tasks
      (see Scheduler.resourceOffers).
    """
    print "Offer rescinded: %s" % offerId.value

  def statusUpdate(self, driver, status):
    """
      Invoked when the status of a task has changed (e.g., a slave is lost
      and so the task is lost, a task finishes and an executor sends a
      status update saying so, etc.) Note that returning from this callback
      acknowledges receipt of this status update.  If for whatever reason
      the scheduler aborts during this callback (or the process exits)
      another status update will be delivered.  Note, however, that this is
      currently not true if the slave sending the status update is lost or
      fails during that time.
    """
    # TASK_STAGING = 6;  // Initial state. Framework status updates should not use.
    # TASK_STARTING = 0;
    # TASK_RUNNING = 1;
    # TASK_FINISHED = 2; // TERMINAL.
    # TASK_FAILED = 3;   // TERMINAL.
    # TASK_KILLED = 4;   // TERMINAL.
    # TASK_LOST = 5;     // TERMINAL.

    print "Task %s is in state %d" % (update.task_id.value, update.state)

    # Ensure the binary data came through.
    if update.data != "data with a \0 byte":
      print "The update data did not match!"
      print "  Expected: 'data with a \\x00 byte'"
      print "  Actual:  ", repr(str(update.data))
      sys.exit(1)

    if update.state == mesos_pb2.TASK_FINISHED:
      self.tasksFinished += 1
      if self.tasksFinished == TOTAL_TASKS:
        print "All tasks done, waiting for final framework message"

      slave_id, executor_id = self.taskData[update.task_id.value]

      self.messagesSent += 1
      driver.sendFrameworkMessage(
        executor_id,
        slave_id,
        'data with a \0 byte')

  def frameworkMessage(self, driver, executorId, slaveId, message):
    """
      Invoked when an executor sends a message. These messages are best
      effort; do not expect a framework message to be retransmitted in any
      reliable fashion.
    """
    self.messagesReceived += 1

    # The message bounced back as expected.
    if message != "data with a \0 byte":
      print "The returned message data did not match!"
      print "  Expected: 'data with a \\x00 byte'"
      print "  Actual:  ", repr(str(message))
      sys.exit(1)
    print "Received message:", repr(str(message))

    if self.messagesReceived == TOTAL_TASKS:
      if self.messagesReceived != self.messagesSent:
        print "Sent", self.messagesSent,
        print "but received", self.messagesReceived
        sys.exit(1)
      print "All tasks done, and all messages received, exiting"
      driver.stop()

  def slaveLost(self, driver, slaveId):
    """
      Invoked when a slave has been determined unreachable (e.g., machine
      failure, network partition.) Most frameworks will need to reschedule
      any tasks launched on this slave on a new slave.
    """
    print "Slave lost: %s" % slaveId.value

  def executorLost(self, driver, executorId, slaveId, status):
    """
      Invoked when an executor has exited/terminated. Note that any tasks
      running will have TASK_LOST status updates automatically generated.
    """
    print "Executor %s lost on slave %s" % (exeuctorId.value, slaveId.value)

  def error(self, driver, message):
    """
      Invoked when there is an unrecoverable error in the scheduler or
      scheduler driver.  The driver will be aborted BEFORE invoking this
      callback.
    """
    print("Error from Mesos: %s " % message, file=sys.stderr)


if __name__ == "__main__":
  if len(sys.argv) != 2:
    print "Usage: %s master" % sys.argv[0]
    sys.exit(1)

  executor = mesos_pb2.ExecutorInfo()
  executor.executor_id.value = "default"
  executor.command.value = os.path.abspath("./executor.py")
  executor.name = "HTTP Proxy Executor"
  executor.source = "python_test"

  framework = mesos_pb2.FrameworkInfo()
  framework.user = "" # Have Mesos fill in the current user.
  framework.name = "HTTP Proxy Framework"

  # TODO(vinod): Make checkpointing the default when it is default
  # on the slave.
  if os.getenv("MESOS_CHECKPOINT"):
    print "Enabling checkpoint for the framework"
    framework.checkpoint = True

  if os.getenv("MESOS_AUTHENTICATE"):
    print "Enabling authentication for the framework"

    if not os.getenv("DEFAULT_PRINCIPAL"):
      print "Expecting authentication principal in the environment"
      sys.exit(1);

    if not os.getenv("DEFAULT_SECRET"):
      print "Expecting authentication secret in the environment"
      sys.exit(1);

    credential = mesos_pb2.Credential()
    credential.principal = os.getenv("DEFAULT_PRINCIPAL")
    credential.secret = os.getenv("DEFAULT_SECRET")

    framework.principal = os.getenv("DEFAULT_PRINCIPAL")

    driver = mesos.MesosSchedulerDriver(
      HTTPProxyScheduler(executor),
      framework,
      sys.argv[1],
      credential)
  else:
    framework.principal = "test-framework-python"

    driver = mesos.MesosSchedulerDriver(
      HTTPProxyScheduler(executor),
      framework,
      sys.argv[1])

  status = 0 if driver.run() == mesos_pb2.DRIVER_STOPPED else 1

  # Ensure that the driver process terminates.
  driver.stop();

  sys.exit(status)
